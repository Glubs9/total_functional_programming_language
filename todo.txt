4. see if you can get that logic programming idea sorted
8. optimize semantics checker so it only runs analysis once and uses that analysi sa whole bunch
	a. maybe, think about it later.
	b also maybe integrate the semantics checker and the executor.
9. see if we can write the semantics checker to only allow construction of objects from correct
types.
	a. like we do data list = cons[a,list] | end;
	b. means that you have to have a list type in the second half.
	c. this would be very good and kind of important to do.
	d. althoguh it would require finding the rturn types of functions

10. more complex type inference
	a. like a simplified hindley milner without polymorphism.
	b. like we can look at the argumnet functions' types nd build an inference search aroudn
	that.
	c. although that's a little odd and we would have to re-write the type checker it's a nifty idea.

12. add file loading?
13. add strings? (or a character type)

14. modularize executor

15. don't allow bottom in primitive functions

16. fix bug in example.tfpl
	- i think it might be something to do with iit not doing bottom or something.

17. destroy self doesn't make sense :(
