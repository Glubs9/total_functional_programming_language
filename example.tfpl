/* this function shows off how we can make use of the non-primitive stff to still get the answer you want */

inf_on_odd{0, original} = true;
inf_on_odd{s[0], original} = inf_on_odd{original, original};
inf_on_odd{s[s[a]], original} = inf_on_odd{a, original};

even_check{0} = end;
even_check{s[a]} = if_not_bottom{
	#inf_on_odd{a, a},
        list[a, even_check{a}],
        even_check{a}
};

divide_two(0) = 0;
divide_two(s[0]) = s[0];
divide_two(s[s[a]]) = s[divide_two(a)];

if_destroy{true, li} = li;
if_destroy{false, li} = destroy_self{}; /* to get aroudn the eager if statement */

check_list{li, num} = if_destroy{
	neq(len(li), divide_two(num)),
	li
};

gen_evens{n} = check_list{even_check{n}, n};

main{} = gen_evens{s[s[s[s[s[s[s[0]]]]]]]};


